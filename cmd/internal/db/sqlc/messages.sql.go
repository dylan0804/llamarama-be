// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: messages.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMessage = `-- name: CreateMessage :exec
INSERT INTO messages (user_id, room_id, content)
VALUES ($1, $2, $3)
`

type CreateMessageParams struct {
	UserID  pgtype.UUID `json:"user_id"`
	RoomID  pgtype.UUID `json:"room_id"`
	Content string      `json:"content"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) error {
	_, err := q.db.Exec(ctx, createMessage, arg.UserID, arg.RoomID, arg.Content)
	return err
}

const getMessagesByRoomId = `-- name: GetMessagesByRoomId :many
SELECT id, user_id, room_id, content, created_at, updated_at FROM messages WHERE room_id = $1
`

func (q *Queries) GetMessagesByRoomId(ctx context.Context, roomID pgtype.UUID) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessagesByRoomId, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RoomID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
